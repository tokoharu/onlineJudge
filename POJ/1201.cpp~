#include<iostream>
#include<cstdio>
#include<cmath>
#include<string>
#include<vector>
#include<utility>
#include<queue>


using namespace std;

typedef long long LL;
typedef pair<int,int> PII;
#define MP make_pair


#define MAX_V 60000
const int INF = 100000;

struct edge{int to,cost;};

int V;
vector<edge> G[MAX_V];
int d[MAX_V];

void dijkstra(int s){
  priority_queue<PII,vector<PII>,greater<PII> >que;
  
  fill(d,d+V,INF);
  d[s]=0;
  
  que.push(PII(0,s));
  
  while(!que.empty()){
    PII p=que.top();que.pop();
    int v=p.second;
    if(d[v]<p.first)continue;
    int sz = G[v].size();
    for(int i=0;i<sz;i++){
      edge e =G[v][i];
      if(d[e.to]>d[v]+e.cost){
	d[e.to]=d[v]+e.cost;
	que.push(PII(d[e.to],e.to));
      }
    }
  }
}

void add_edge(int from,int to,int cost){
  G[from].push_back((edge){to,cost});
}

int main() {
  int n;
  //  cin>>n;
  scanf("%d",&n);
  V = 50008;
  for(int i=0; i<n; i++) {
    int a,b,x;
    scanf("%d%d%d",&a,&b,&x);
    add_edge(b+1,a,-x);
  }
  
  for(int i=0; i<50005; i++) {
    add_edge(i,i+1, 1);
    add_edge(i+1,i,0);
  }
  //  cout<<"hoge"<<endl;
  
  dijkstra(50002);
  //  cout<<-d[0]<<endl;
  printf("%d\n",-d[0]);
  return 0;
}
